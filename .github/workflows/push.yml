---
name: role-jumpcloud-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# GALAXY_API_KEY             (Required, for Ansible Galaxy Import...)

on:
  push:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  PROJECT_NAME: "role-jumpcloud"
  USERNAME: "osx-provisioner"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  create_release:
    needs: [documentation_test, molecule_lint, osx_build, security_test, start_notification, workflow_lint]

    runs-on: ubuntu-latest

    steps:
      - name: Release -- Checkout Repository
        if: contains(github.ref, '/tags/v')
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source ./.github/scripts/setup.sh
          echo "{}" > package.json
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@v1.3.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Release -- Create Github Release
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: true
          prerelease: false

      - name: Release -- Report Job Status (Success)
        if: contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Release -- Report Job Status (Failure)
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v2

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  molecule_lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Molecule Lint -- Checkout Repository
        uses: actions/checkout@v2

      - name: Molecule Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Lint -- Install Requirements
        run: |
          pip install poetry
          poetry install

      - name: Molecule Lint -- Run Linter
        run: |
          poetry run molecule lint

      - name: Molecule Lint -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule linting was successful!"

      - name: Molecule Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule linting has failed!"

  osx_build:

    runs-on: macos-${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [10.15]
        platform: [x86_64]
        python-version: [3.8.10]
        scenario: ["mock_install_no_update", "mock_install_with_update"]

    steps:
      - name: OSX Build -- Checkout
        uses: actions/checkout@v2

      - name: OSX Build -- Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: OSX Build -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/build.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: OSX Build -- Molecule Scenario
        run: |
          poetry run molecule test -s "${SCENARIO}"
        env:
          SCENARIO: ${{ matrix.scenario}}

      - name: OSX Build -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: OSX ${{ matrix.os }}, molecule test scenario '${SCENARIO}' was successful"
        env:
          SCENARIO: ${{ matrix.scenario}}

      - name: OSX Build -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: OSX ${{ matrix.os }}, molecule test scenario '${SCENARIO}' failed!"
        env:
          SCENARIO: ${{ matrix.scenario}}

  security_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Security Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: Security Test -- Check Dependencies
        run: |
          pip install safety poetry
          poetry install
          poetry export -f requirements.txt --without-hashes | safety check --stdin

      - name: Security Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  start_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v2

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v2

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  workflow_lint:

    runs-on: ubuntu-latest

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v2

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Run Linter
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./.github/workflows
          config_file: ./.yamllint

      - name: Workflow Lint -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Workflow Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
