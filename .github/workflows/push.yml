---
name: role-jumpcloud-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# GALAXY_API_KEY             (Required, for Ansible Galaxy Import...)

on:
  push:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  PROJECT_NAME: "role-jumpcloud"
  USERNAME: "osx-provisioner"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v3

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v3

      - name: Success -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  create_release:
    needs: [_start_notification, documentation_test, molecule_lint, osx_build, security_test, toml_lint, workflow_lint]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          MATCH="FALSE"
          [[ "${{ github.event.ref }}" =~ /tags/v\.* ]] && MATCH="TRUE"
          echo "MATCH=${MATCH}" >> $GITHUB_OUTPUT

      - name: Create Release -- Checkout Repository
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Generate Github Release Draft
        if: steps.branch_filter.outputs.match == 'TRUE'
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const result = await github.rest.repos.createRelease({
                body: process.env.CHANGE_LOG_CONTENT,
                draft: true,
                name: "Release " + process.env.BRANCH_OR_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.BRANCH_OR_TAG,
              });
              return result
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create Release -- Report Job Status (Success)
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v3

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.13
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  molecule_lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
      - name: Molecule Lint -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'role'

      - name: Molecule Lint -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Lint -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh

      - name: Molecule Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Lint -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs/
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: Molecule Lint -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Lint -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Molecule Lint -- Install Requirements
        run: |
          cd role
          poetry install

      - name: Molecule Lint -- Run Linter
        run: |
          cd role
          poetry run molecule lint

      - name: Molecule Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule linting was successful!"

      - name: Molecule Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule linting has failed!"

  osx_build:

    runs-on: macos-${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [11]
        platform: [x86_64]
        python-version: [3.9]
        scenario: ["mock_install_no_update", "mock_install_with_update"]

    steps:
      - name: OSX Build -- Checkout
        uses: actions/checkout@v3
        with:
          path: 'role'

      - name: OSX Build -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: OSX Build -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh

      - name: OSX Build -- Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: OSX Build -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: OSX Build -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: OSX Build -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/Library/Caches/pypoetry/virtualenvs

      - name: OSX Build -- Install Requirements
        run: |
          cd role
          poetry install

      - name: OSX Build -- Reuse Cached Dependencies as Scenario
        run: |
          cd role
          poetry run molecule dependency
          mv ~/.cache/molecule/role/default ~/.cache/molecule/role/"${SCENARIO}"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: OSX Build -- Molecule Scenario
        run: |
          cd role
          poetry run molecule test -s "${SCENARIO}"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: OSX Build -- Reuse Scenario Dependencies as Cache
        run: |
          mv ~/.cache/molecule/role/"${SCENARIO}" ~/.cache/molecule/role/default
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: OSX Build -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: OSX ${{ matrix.os }}, molecule test scenario '${SCENARIO}' was successful"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: OSX Build -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: OSX ${{ matrix.os }}, molecule test scenario '${SCENARIO}' failed!"
        env:
          SCENARIO: ${{ matrix.scenario }}

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source .github/scripts/pushed_commit_range.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Security Test -- Run Trufflehog
        uses: trufflesecurity/trufflehog@v3.27.1
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_RANGE }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  toml_lint:

    runs-on: ubuntu-latest

    steps:
      - name: Toml Lint -- Checkout Repository
        uses: actions/checkout@v3

      - name: Toml Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Toml Lint -- Run Linter
        run: |
          tomll pyproject.toml
          git diff --exit-code

      - name: Toml Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  workflow_lint:

    runs-on: ubuntu-latest

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v3

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Run Linter
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./.github/workflows
          config_file: ./.yamllint

      - name: Workflow Lint -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Workflow Lint -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
